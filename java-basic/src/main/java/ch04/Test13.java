// 비트 연산자 : &, |, ^, ~
// => 이미지 프로세싱 분야에서 사용됨.
package ch04;

public class Test13 {

  public static void main(String[] args) {
    
    // & => 둘 다 1일 때만 결과는 1이다.
    // | => 둘 중 한 개라도 1이면 결과는 1이다.
    
    int a = 0xca; //0000 0000 0000 0000 0000 0000 1100 1010
    int b = 0x66; //0000 0000 0000 0000 0000 0000 0110 0110
    
    System.out.println(a & b); // 0000 0000 0000 0000 0000 0000 0100 0010 => 66
    
    System.out.println(a | b); // 0000 0000 0000 0000 0000 0000 1110 1110 => 238
    
    // ^ => 두 개의 비트가 다르면 결과는 1이다. 
    System.out.println(a ^ b); // 0000 0000 0000 0000 0000 0000 1010 1100 => 172
    
    // ! => 모든 비트를 반대 값으로 바꾼다.
    System.out.println(~a); // 1111 1111 1111 1111 1111 1111 0011 0101
    
    
   // & 활용: 특정 값을 차단하고 특정 값만 통과시킬 때
    
  }
    
}

/* 
 # 연산자 우선 순위
 괄호
 후위 연산자: a++, a--
 전위 연산자: ++a, --a, 단항 연산자(+, -)
 *, /, %
 +, -
 비트이동 연산자: <<, >>, >>>
 관계 연산자 : <, >, <=, >=, instanceof
 등위 연산자 : ==, !=
 &
 ^
 |
 논리 연산자 AND: &&
 논리 연산자 OR: ||
 삼항 연산자 : (조건) ? 값 : 값
 할당 연산자 : =, +=, -=, *=, /=, %=, ^= */
